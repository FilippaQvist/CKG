remove_project:
    name: remove project
    description: Remove project and all its relationships (Subject, Biological sample, Analytical sample)
    involved_nodes:
        - Project
        - Subject
        - Biological_sample
        - Analytical_sample
    involved_rels:
        - HAS_ENROLLED
        - BELONGS_TO_SUBJECT
        - SPLITTED_INTO
    query_type: post
    query: >
            call apoc.periodic.iterate('MATCH (p:Project)-[:HAS_ENROLLED]-(s:Subject)-[:BELONGS_TO_SUBJECT]-(bio:Biological_sample)-[:SPLITTED_INTO]-(a:Analytical_sample)-[]-()
                WHERE p.id="PROJECTID" RETURN a',
                "DETACH DELETE a",
                {batchSize:50}) yield batches, total return batches, total;
            call apoc.periodic.iterate('MATCH (p:Project)-[:HAS_ENROLLED]-(s:Subject)-[:BELONGS_TO_SUBJECT]-(bio:Biological_sample)-[:SPLITTED_INTO]-(a:Analytical_sample)
                WHERE p.id="PROJECTID" RETURN a',
                "DETACH DELETE a",
                {batchSize:50}) yield batches, total return batches, total;
            call apoc.periodic.iterate('MATCH (p:Project)-[:HAS_ENROLLED]-(s:Subject)-[:BELONGS_TO_SUBJECT]-(bio:Biological_sample)
                WHERE p.id="PROJECTID" RETURN bio',
                "DETACH DELETE bio",
                {batchSize:50}) yield batches, total return batches, total;
            call apoc.periodic.iterate('MATCH (p:Project)-[:HAS_ENROLLED]-(s:Subject)
                WHERE p.id="PROJECTID" RETURN s',
                "DETACH DELETE s",
                {batchSize:50}) yield batches, total return batches, total;
            MATCH (p:Project) WHERE p.id="PROJECTID" DETACH DELETE p;
attributes:
    name: project information
    description: 'Gets all the attributes of a given Project. Requires: Project.id'
    involved_nodes:
        - Project
    involved_rels:
    query_type: pre
    query: >
        MATCH (project:Project)
        WITH project, size((project)-[]->(:Subject)) AS number_subjects
        WHERE project.id="PROJECTID"
        RETURN project.id AS identifier, project.name AS name, project.acronym AS acronym,
        project.type AS data_types, project.responsible AS responsible, project.description AS description, number_subjects, project.status AS status;
extract_projectID:
    name: project identifier
    description: 'Returns project external identifier. Requires internal identifier.'
    involved_nodes:
        - Project
    involved_rels:
    query_type: post
    query: >
        MATCH (p:Project)
        WHERE p.internal_id = "INTERNALID"
        RETURN p.id;
similarity:
    name: pearson_similarity
    description: The Pearson Similarity function computes the similarity of two given projects based on the proteins identified.
    involved_nodes:
        - Project
        - Protein
    involved_rels:
        - HAS_QUANTIFIED_PROTEIN
    query_type: pre
    query: >
        MATCH (project1:Project{id:'PROJECTID'})-[:HAS_ENROLLED]->(:Subject)<-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein)
        WHERE toBoolean(r.is_razor)
        WITH project1, gds.alpha.similarity.asVector(protein, r.value) AS p1Vector
        MATCH (project2:Project)-[:HAS_ENROLLED]->(:Subject)<-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein)
        WHERE toBoolean(r.is_razor) AND project1 <> project2
        WITH project1, project2, p1Vector, gds.alpha.similarity.asVector(protein, r.value) AS p2Vector
        RETURN project1.id AS current_id, project2.id AS other_id, project1.name AS current, project2.name AS other, project2.description AS description, project2.responsible AS responsible, gds.alpha.similarity.pearson(p1Vector, p2Vector, {vectorType: "maps"}) AS similarity_pearson ORDER BY similarity_pearson DESC
overlap:
    name: overlap_similarity
    description: Get overlap of entities between projects i.e. ENTITY = Biological_process, RELATIONSHIP = ASSOCIATED_WITH
    involved_nodes:
        - Project
    involved_rels:
    query_type: pre
    query: >
        MATCH (project1:Project)-[:HAS_ENROLLED]->(:Subject)<-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein1:Protein)
        WHERE toBoolean(r.is_razor)
        WITH project1, COUNT(DISTINCT id(protein1)) AS count1, collect(DISTINCT id(protein1)) AS projectData1
        MATCH (project2:Project)-[:HAS_ENROLLED]->(:Subject)<-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r2:HAS_QUANTIFIED_PROTEIN]->(protein2:Protein)
        WHERE toBoolean(r2.is_razor) AND project1 <> project2 AND ID(project1) < ID(project2)
        WITH project1, count1, projectData1, project2, COUNT(DISTINCT id(protein2)) AS count2, collect(DISTINCT id(protein2)) AS projectData2, size(apoc.coll.intersection(projectData1, collect(DISTINCT id(protein2)))) AS intersection
        RETURN project1.name AS project1_name, project2.name AS project2_name, project1.id AS from, project2.id AS to, count1 AS project1_total, count2 AS project2_total, count1-intersection AS project1_unique, count2-intersection AS project2_unique, intersection, gds.alpha.similarity.jaccard(projectData1, projectData2) AS similarity ORDER BY similarity DESC
project_graph:
    name: project graph
    description: full graph for a project
    involves_nodes:
        - Project
        - Biological_samples
        - Anlytical_samples
    involved_rels:
        - HAS_ENROLLED
        - BELONGS_TO_SUBJECT
        - SPLITTED_INTO
    query_type: post
    query: >
        MATCH (p:Project)-[:HAS_ENROLLED]->(s:Subject)<-[:BELONGS_TO_SUBJECT]-(b:Biological_sample)-[:SPLITTED_INTO]-(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(n:Protein)
        WHERE p.id="PROJECTID"
        WITH p.id AS project, COUNT(DISTINCT s.id) AS subjects, COUNT(DISTINCT b.id) AS biological_samples,
        COUNT(DISTINCT a.id) AS analytical_samples, COUNT(DISTINCT r.proteinGroup) AS groups, COUNT(DISTINCT n.id) AS proteins
        RETURN project, subjects, biological_samples, analytical_samples, groups, proteins;
projects_subgraph:
    name: connected projects
    description: returns a subgraph for a list of projects
    involved_nodes:
        - Project
        - Disease
        - Tissue
        - Clinical_variable
    involved_rels:
        - STUDIES_DISEASE
        - STUDIES_TISSUE
        - STUDIES_INTERVENTION
    query_type: post
    query: >
        MATCH path=(p:Project)-[:STUDIES_DISEASE|STUDIES_TISSUE|STUDIES_INTERVENTION]->() WHERE p.id IN [LIST_PROJECTS] RETURN path
project_sdrf:
    name: project info sdrf
    description: project information required to convert to sdrf format
    involved_nodes:
        - Project
        - Biological_sample
        - Analytical_sample
        - Clinical_variable
        - Experimental_factor
    involved_rels:
        - HAS_ENROLLED
        - SPLITTED_INTO
        - BELONGS_TO_SUBJECT
        - HAS_QUANTIFIED_CLINICAL
        - HAS_CLINICAL_STATE
    query_type: post
    query: >
        MATCH (p:Project)-[]-(s:Subject)-[]-(bs:Biological_sample)-[]-(as:Analytical_sample)
        WHERE p.id='PROJECTID'
        WITH s, bs, as
        MATCH (bs)-[r]-(c:Clinical_variable)-[MAPS_TO]-(ef:Experimental_factor)
        WITH s, bs, as, ef, r
        MATCH (bs)-[:FROM_TISSUE]-(t:Tissue)
        RETURN s.external_id AS subject, bs.external_id AS biological_sample, r.value AS exp_factor_value , as.external_id AS analytical_sample, as.group AS grouping1, ef.name AS exp_factor, t.name AS tissue
