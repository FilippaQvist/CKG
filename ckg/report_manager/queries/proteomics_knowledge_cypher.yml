Disease:
  name: associated diseases in at least two of the proteins specified
  description: get relationships to diseases from a list of proteins. Limit the result to diseases associated to the disease studied and with a score higher than 3 (DISEASES).
  query_type: knowledge_report
  involved_nodes:
    - Protein
    - Disease
  involved_rels:
    - ASSOCIATED_WITH
  query: >
          MATCH (project:Project)-[:STUDIES_DISEASE]-(d:Disease)-[:HAS_PARENT]->(parent_disease:Disease)-[:HAS_PARENT]->()
          WHERE project.id="PROJECTID"
          WITH COLLECT(parent_disease) + COLLECT(d) AS parent_diseases
          MATCH (protein:Protein)-[r]-(disease:Disease)-[:HAS_PARENT]->(parents:Disease)
          WHERE ((protein.name+"~"+protein.id) IN [PROTEINIDS]) AND toFloat(r.score)>1.0 AND parents IN parent_diseases
          RETURN (protein.name+"~"+protein.id) AS node1, disease.name AS node2, r.score AS weight, type(r) AS type
Drug:
  name: associated drugs in at least two of the proteins specified
  description: get relationships to drugs. Limit the result to drugs associated to at least two proteins with a score higher than 0.9 (STITCH).
  query_type: knowledge_report
  involved_nodes:
    - Protein
    - Drug
  involved_rels:
    - ACTS_ON
  query: >
          MATCH (protein:Protein)-[r:ACTS_ON]-(drug:Drug)
          WHERE ((protein.name+"~"+protein.id) IN [PROTEINIDS]) AND toFloat(r.score)>=0.9
          WITH drug, count(protein) AS r_count
          WHERE r_count>=LIMIT_COUNT
          MATCH (protein:Protein)<-[r:ACTS_ON]-(drug)
          WHERE ((protein.name+"~"+protein.id) IN [PROTEINIDS]) AND toFloat(r.score)>=0.9
          RETURN (protein.name+"~"+protein.id) AS node1, drug.name AS node2, r.score AS weight, r.action AS type
Complex:
  name: associated complexes in at least two of the proteins specified
  description: get annotated to complexes. Limit the result to complexes with at least two proteins annotated.
  query_type: knowledge_report
  involved_nodes:
    - Protein
    - Complex
  involved_rels:
    - IS_SUBUNIT_OF
  query: >
          MATCH (complex:Complex)<-[:IS_SUBUNIT_OF]-(protein:Protein)
          WHERE ((protein.name+"~"+protein.id) IN [PROTEINIDS])
          WITH complex, collect(protein) as Proteins WHERE size(Proteins)>=LIMIT_COUNT
          MATCH (complex)<-[r:IS_SUBUNIT_OF]-(p:Protein)
          WHERE ((p.name+"~"+p.id) IN [PROTEINIDS])
          RETURN (p.name+"~"+p.id) as node1, complex.name AS node2, r.score AS weight, type(r) as type
Pathway:
  name: associated pathways
  description: get relationships to pathways. Limit the result to pathways associated to at least two proteins.
  query_type: knowledge_report
  involved_nodes:
    - Protein
    - Pathway
  involved_rels:
    - ANNOTATED_IN_PATHWAY
  query: >
          MATCH (protein:Protein)-[r]-(pathway:Pathway)
          WHERE ((protein.name+"~"+protein.id) IN [PROTEINIDS]) AND toLower(r.source)="reactome"
          WITH pathway, count(protein) AS r_count
          WHERE r_count>=LIMIT_COUNT
          MATCH (protein:Protein)-[r]-(pathway)
          WHERE ((protein.name+"~"+protein.id) IN [PROTEINIDS])
          RETURN (protein.name+"~"+protein.id) AS node1, pathway.name AS node2, r.score AS weight, type(r) AS type
Publication:
  name: associated publications
  description: get publications where at least LIMIT_COUNT proteins have been mentioned
  query_type: knowledge_report
  involved_nodes:
    - Protein
    - Publication
  involved_rels:
    - MENTIONED_IN_PUBLICATION
  query: >
        MATCH (project:Project)-[:STUDIES_DISEASE]->(disease:Disease)-[:HAS_PARENT]->(pdisease:Disease)<-[:HAS_PARENT]-(cdiseases:Disease)
        WHERE project.id="PROJECTID"
        WITH collect(disease)+collect(pdisease)+collect(cdiseases) AS diseases
        MATCH (d:Disease)-[:MENTIONED_IN_PUBLICATION]->(publication:Publication)<-[r:MENTIONED_IN_PUBLICATION]-(protein:Protein)
        WHERE d in diseases AND (protein.name+"~"+protein.id) IN [PROTEINIDS]
        WITH protein, publication, r, COUNT(r) AS r_count WHERE r_count>=LIMIT_COUNT
        RETURN DISTINCT (protein.name+"~"+protein.id) AS node1, ("PMID:"+publication.id) AS node2, type(r) as type, r_count ORDER BY r_count DESC LIMIT 70;
association_disease_score:
  name: specific disease
  description: Return the list of proteins associated to a specific disease with a specific score.
  query_type: knowledge
  involved_nodes:
    - Protein
    - Disease
  involved_rels:
    - ASSOCIATED_WITH
  example:
          - proteins = ['A1BG~P04217','A2M~P01023','ACACB~O00763','ACTC1~P68032','ADIPOQ~Q15848','AGT~P01019','AIFM2~Q9BRQ8','APOA2~V9GYM3']
          - disease  = ['DOID:1324']
          - score = 3
          - protein_disease_associations = queries["association_disease_score"]["query"].format(proteins, disease, score)
  query: >
          MATCH (protein:Protein)-[r]-(disease:Disease)
          WHERE ((protein.name+"~"+protein.id) IN [{}]) AND disease.id IN [{}] AND toFloat(r.score)>{}
          RETURN (protein.name+"~"+protein.id) AS node1, disease.name AS node2, r.score AS weight, type(r) AS type, r.source AS source
association_drug_intervention_proteins:
  name: drug intervention- protein association
  description: Return associations between a list of proteins and the drug intervention in the project
  query_type: knowledge
  involved_nodes:
    - Project
    - Protein
    - Clinical_variable
    - Drug
  involved_rels:
    - HAD_INTERVENTION
    - ACTS_ON
  example:
          - project_id = 'P0000002'
          - proteins = ['A1BG~P04217','A2M~P01023','ACACB~O00763','ACTC1~P68032','ADIPOQ~Q15848','AGT~P01019','AIFM2~Q9BRQ8','APOA2~V9GYM3']
          - type  = 'inhibition'
          - score = 0.9
          - intervention_protein_associations = queries["association_drug_intervention_proteins"]["query"].format(project_id, proteins, type, score)
  query: >
          MATCH (project:Project)-[]-()-[:HAD_INTERVENTION]-(c:Clinical_variable)
          WHERE project.id={} AND intervention.type='drug treatment'
          WITH COLLECT(toLower(c.name)) AS interventions
          MATCH (drug:Drug)-[r:ACTS_ON]->(protein:Protein)
          WHERE ((protein.name+"~"+protein.id) IN [{}]) AND r.action="{}" AND toFloat(r.score)>={} AND toLower(drug.name) IN interventions
          RETURN (protein.name+"~"+protein.id) AS node1, drug.name AS node2, drug.id AS drug_id, drug.description AS Drug_desc, r.score AS weight, type(r) AS type, r.action AS action, r.source AS source
association_drug_interaction_score:
  name: drug interaction association
  description: Return the list of drugs associated to the list of proteins provided with a specific interaction (i.e. inhibition, activation) with a specific score
  query_type: knowledge
  involved_nodes:
    - Protein
    - Drug
  involved_rels:
    - ACTS_ON
  example:
          - proteins = ['A1BG~P04217','A2M~P01023','ACACB~O00763','ACTC1~P68032','ADIPOQ~Q15848','AGT~P01019','AIFM2~Q9BRQ8','APOA2~V9GYM3']
          - type  = 'inhibition'
          - score = 0.9
          - protein_drug_associations = queries["association_drug_interaction_score"]["query"].format(proteins, type, score)
  query: >
          MATCH (protein:Protein)-[r]-(drug:Drug)
          WHERE ((protein.name+"~"+protein.id) IN [{}]) AND r.action="{}" AND toFloat(r.score)>={}
          RETURN (protein.name+"~"+protein.id) AS node1, drug.name AS node2, drug.id AS drug_id, drug.description AS Drug_desc, r.score AS weight, type(r) AS type, r.action AS action, r.source AS source
association_drug_sideeffects:
  name: drug side effect association
  description: Return the list of side effects linked to drugs
  query_type: knowledge
  involved_nodes:
    - Phenotype
    - Drug
  involved_rels:
    - ASSOCIATED_WITH
  example:
          - drugs = ['DB00439', 'DB06196']
          - drug_side_effect_associations = queries["association_drug_sideeffects"]["query"].format(drugs)
  query: >
          MATCH (sideeffect:Phenotype)-[r]-(drug:Drug)
          WHERE (drug.id IN [{}])
          RETURN drug.name AS node1, sideeffect.name AS node2, type(r) AS type, r.source AS source
association_drug_disease_publication:
  name: drug co-mentioned with disease in publication
  description: Return the list of publications co-mentioning drugs and a specific disease
  query_type: knowledge
  involved_nodes:
    - Drug
    - Disease
    - Publication
  involved_rels:
    - MENTIONED_IN_PUBLICATION
  example:
          - drugs = ['DB00439', 'DB06196']
          - disease  = ['DOID:1324']
          - drug_disease_publications = queries["association_drug_disease_publication"]["query"].format(drugs, disease)
  query: >
          MATCH (drug:Drug)-[r:MENTIONED_IN_PUBLICATION]-(publication)-[:MENTIONED_IN_PUBLICATION]-(disease:Disease)
          WHERE (drug.id IN [{}]) AND disease.id IN [{}]
          RETURN drug.name AS node1, ("PMID:"+publication.id) AS node2, publication.linkout AS linkout, publication.year as Year, type(r) AS type
association_combination_drug_disease_publication:
  name: combinations of drugs co-mentioned with disease
  description: Return the list of publications co-mentioning combinations of drugs and a specific disease
  query_type: knowledge
  involved_nodes:
    - Drug
    - Disease
    - Publication
  involved_rels:
    - MENTIONED_IN_PUBLICATION
  example:
          - drugs = ['DB00439', 'DB06196']
          - disease  = ['DOID:1324']
          - drug_disease_publications = queries["association_drug_disease_publication"]["query"].format(drugs, disease, drugs, disease)
  query: >
          MATCH (drug:Drug)-[r:MENTIONED_IN_PUBLICATION]-(publication:Publication)
          WHERE (drug.id IN [{}])
          WITH publication, count(r) AS r_count WHERE r_count>1
          MATCH (drug:Drug)-[r:MENTIONED_IN_PUBLICATION]-(publication)-[:MENTIONED_IN_PUBLICATION]-(drug2:Drug)
          WHERE (drug.id IN [{}]) AND drug2.id IN [{}] AND drug.id<>drug2.id
          RETURN (drug.name +", "+drug2.name) AS node1, publication.id AS node2, publication.linkout AS linkout, publication.year as Year, type(r) AS type
side_effects_jaccard_similarity_intervention_proposed_drugs:
  name: similarity between side effects
  description: Return the jaccard similarity between drugs used and alternative drugs proposed
  query_type: knowledge
  involved_nodes:
    - Drug
    - Clinical_variable
  involved_rels:
    - HAS_SIDE_EFFECT
  example:
          - intervention = ['Capecitabine', 'Fluorouracil']
          - drugs = ['DB00439', 'DB06196']
          - similarity = queries["side_effects_jaccard_similarity_intervention_proposed_drugs"]["query"].replace("INTERVENTION", ",".join(intervention)).replace("DRUG", ",".join(drugs))
  query: >
          MATCH (d1:Drug)-[:HAS_SIDE_EFFECT]->(phenotype1)
          WHERE d1.name in [INTERVENTION]
          WITH d1, collect(id(phenotype1)) as treatmentData
          MATCH (d2:Drug)-[:HAS_SIDE_EFFECT]->(phenotype2)
          WHERE d2.id IN [DRUG] AND d1 <> d2
          WITH d1, treatmentData, d2, collect(id(phenotype2)) as proposedData, size(apoc.coll.intersection(treatmentData, collect(DISTINCT id(phenotype2)))) AS intersection
          RETURN d1.name AS from, d2.name AS to, intersection, gds.alpha.similarity.jaccard(proposedData, treatmentData) AS similarity
          ORDER BY similarity DESC
