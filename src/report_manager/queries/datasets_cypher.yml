proteomics:
    NUMBER_OF_PROTEINS:
        name: 'number of proteins'
        description: 'Extracts the number of proteins identified in a given Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Protein
        involved_rels:
            - HAS_QUANTIFIED_PROTEIN
        query_type: pre
        query: >
            MATCH p=(project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein) 
            WHERE project.id="PROJECTID"  AND toBoolean(r.is_razor)
            RETURN a.external_id AS name, a.external_id AS x,COUNT(DISTINCT(protein.id)) AS y, a.group AS group ORDER BY group;
    NUMBER_OF_PEPTIDES:
        name: 'number of peptides'
        description: 'Extracts the number of peptides identified in a given Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Peptide
        involved_rels:
            - HAS_QUANTIFIED_PEPTIDE
        query_type: pre
        query: >
            MATCH p=(project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PEPTIDE]->(peptide:Peptide) 
            WHERE project.id="PROJECTID" 
            RETURN a.external_id AS name, a.external_id AS x, a.group AS group,COUNT(DISTINCT(peptide.id)) AS y ORDER BY group;
    NUMBER_OF_MODIFIED_PROTEINS:
        name: number of modified proteins
        description: 'Extracts the number of modified proteins identified in a given Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Modified_protein
        involved_rels:
            - HAS_QUANTIFIED_MODIFIED_PROTEIN
        query_type: pre
        query: >
            MATCH p=(project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_MODIFIED_PROTEIN]->(modifiedprotein:Modified_protein)-[:HAS_MODIFICATION]->(modification:Modification) 
            WHERE project.id="PROJECTID" 
            RETURN a.external_id AS name, a.external_id AS x,a.group AS group,COUNT(DISTINCT(modifiedprotein.id)) AS y,modification.name AS type ORDER BY group;
    PROTEIN_BIOMARKERS:
        name: 'protein ranking with biomarkers'
        description: 'Extracts the proteins identified in each group and highlights known biomarkers'
        involved_nodes:
            - Project
            - Analytical_sample
            - Protein
            - Disease
            - Biomarker
        involved_rels:
            - HAS_QUANTIFIED_PROTEIN
            - IS_BIOMARKER_IN_DISEASE
        query_type: pre
        query: >
            MATCH (project:Project)-[:STUDIES_DISEASE]->(disease:Disease)-[:HAS_PARENT]->(pdisease:Disease)-[:HAS_PARENT]->()
            WHERE project.id="PROJECTID"
            WITH project, collect(disease)+collect(pdisease) AS diseases
            MATCH (project)-[:HAS_ENROLLED]->(:Subject)<-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein) 
            WHERE toBoolean(r.is_razor)
            WITH diseases, protein
            MATCH (protein)-[:IS_BIOMARKER_OF_DISEASE]->(d)
            WHERE d IN diseases
            RETURN DISTINCT protein.name+"~"+protein.id AS identifier, d.name AS disease;
    TISSUE_QCMARKERS:
        name: 'Tissue qc markers'
        description: 'Extracts the proteins quality control markers for the studied tissue'
        involved_nodes:
            - Project
            - Tissue
            - Protein
        involved_rels:
            - STUDIES_TISSUE
            - IS_QCMARKER_IN_TISSUE
        query_type: pre
        query: >
            MATCH (project:Project)-[:STUDIES_TISSUE]->(tissue:Tissue)
            WHERE project.id="PROJECTID"
            WITH project, collect(tissue) as tissues
            MATCH (project)-[:HAS_ENROLLED]->(:Subject)<-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein)
            WHERE toBoolean(r.is_razor)
            WITH tissues, protein
            MATCH (protein)-[r:IS_QCMARKER_IN_TISSUE]->(t:Tissue)
            WHERE t IN tissues
            RETURN DISTINCT protein.name+"~"+protein.id AS identifier, r.class AS class, t.name AS tissue;
    METADATA:
        name: 'clinical variables'
        description: 'Extracts the list of clinical variables measured for the studied subjects'
        involved_nodes:
            - Project
            - Subject
            - Biological_sample
            - Clinical_variable
        involved_rels:
            - HAS_ENROLLED
            - HAS_DISEASE
            - BELONGS_TO_SUBJECT
            - HAS_QUANTIFIED_CLINICAL
            - HAS_CLINICAL_STATE
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(subject:Subject)<-[:BELONGS_TO_SUBJECT]-(bs:Biological_sample)-[r1]->(clinvar:Clinical_variable)
            WITH subject, bs, clinvar, r1
            WHERE project.id="PROJECTID"
            MATCH (bs)-[r2:SPLITTED_INTO]-(an:Analytical_sample)
            RETURN subject.external_id AS subject, bs.external_id AS biological_sample, an.group AS group, clinvar.name AS clinical_variable, r1.value AS value, type(r1) AS rel_type ORDER BY subject
    PROTEIN_PATHWAY_ANNOTATION:
        name: 'get pathway annotations for the proteins identified'
        description: 'Get all the pathway annotations for the all the proteins identified in a project'
        involved_nodes:
            - Project
            - Analytical_sample
            - Protein
            - Pathway
        involved_relationships:
            - ANNOTATED_IN_PATHWAY
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein)-[rp:ANNOTATED_IN_PATHWAY]->(pathway:Pathway) 
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor) AND toLower(rp.source) IN ["reactome"]
            RETURN DISTINCT protein.name+"~"+protein.id AS identifier,pathway.name AS annotation,rp.source AS source
    PROTEIN_GO_ANNOTATION:
        name: 'get gene ontology annotations for the proteins identified'
        description: 'Get all the gene ontology annotations for the all the proteins identified in a project'
        involved_nodes:
            - Project
            - Analytical_sample
            - Protein
            - Biological_process
        involved_relationships:
            - ASSOCIATED_WITH
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(subject:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein)-[rp:ASSOCIATED_WITH]->(go:Biological_process) 
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor)
            RETURN DISTINCT protein.name+"~"+protein.id AS identifier,go.name AS annotation,rp.source AS source
    ORIGINAL:
        name: 'get dataset from project'
        description: 'Extracts the dataset matrix of quantified proteins in a given Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Protein
        involved_rels:
            - HAS_QUANTIFIED_PROTEIN
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(subject:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein) 
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor)
            RETURN subject.external_id as subject, a.external_id AS sample, protein.id AS identifier, a.group AS group, toFloat(r.value) as LFQ_intensity, protein.name AS name ORDER BY name, group;
    PROTEIN_INTERACTION_NETWORK:
        name: 'get PPI network'
        description: 'Get all the protein-protein interactions for the relevant proteins'
        involved_nodes:
            - Protein
        involved_relationships:
            - CURATED_INTERACTS_WITH
            - COMPILED_INTERACTS_WITH
            - ACTS_ON
        query_type: post
        query: >
            MATCH (protein1:Protein)-[r:CURATED_INTERACTS_WITH|:COMPILED_INTERACTS_WITH|:ACTS_ON]-(protein2:Protein) 
            WHERE ((protein1.name+"~"+protein1.id) IN [IDENTIFIERS]) AND ((protein2.name+"~"+protein2.id) IN [IDENTIFIERS]) AND (r.score>=0.7 OR TYPE(r)="CURATED_INTERACTS_WITH")
            RETURN protein1.name+"~"+protein1.id AS node1,protein2.name+"~"+protein2.id AS node2,r.score AS score, r.source AS source,r.action AS action,r.interaction_type AS interaction_type
    PROTEIN_DRUG_ASSOCIATIONS:
        name: 'get drugs targetting the list of proteins'
        description: 'Get all the drug-protein associations for the relevant proteins'
        involved_nodes:
            - Protein
            - Drug
        involved_relationships:
            - ACTS_ON
            - COMPILED_INTERACTS_WITH
        query_type: post
        query: >
            MATCH (drug:Drug)-[r:ACTS_ON]->(protein:Protein) 
            WHERE ((protein.name+"~"+protein.id) IN [IDENTIFIERS]) AND r.score>=0.7
            RETURN DISTINCT collect(protein.name+"~"+protein.id) AS Proteins,drug.name AS Drug,r.score AS score, r.source AS source,r.action AS action
    PROTEIN_COMPLEX_ASSOCIATIONS:
        name: 'get complexes involving the list of proteins'
        description: 'Get all the complex-protein associations for the relevant proteins'
        involved_nodes:
            - Protein
            - Comlex
        involved_relationships:
            - IS_SUBUNIT_OF
        query_type: post
        query: >
            MATCH (complex:Complex)<-[r:IS_SUBUNIT_OF]-(protein:Protein) 
            WHERE ((protein.name+"~"+protein.id) IN [IDENTIFIERS])
            WITH complex.name AS Complex, r.source AS source, collect(DISTINCT protein.name+"~"+protein.id) AS Proteins
            WHERE SIZE(Proteins)>1
            RETURN Proteins, Complex, SIZE(Proteins) AS num_proteins, source
    PROTEIN_DISEASE_ASSOCIATIONS:
        name: 'get diseases associated to the list of proteins'
        description: 'Get all the disease-protein associations for the relevant proteins'
        involved_nodes:
            - Protein
            - Disease
        involved_relationships:
            - ASSOCIATED_WITH
        query_type: post
        query: >
            MATCH (project:Project)-[:STUDIES_DISEASE]-(d:Disease)-[:HAS_PARENT]->(p:Disease)<-[:HAS_PARENT]-(parent_disease:Disease)
            WHERE project.id="PROJECTID" AND p.id <> "DOID:4"
            WITH COLLECT(parent_disease) + COLLECT(d) AS parent_diseases
            MATCH (protein:Protein)-[r]-(disease:Disease)
            WHERE ((protein.name+"~"+protein.id) IN [IDENTIFIERS]) AND disease IN parent_diseases
            RETURN DISTINCT collect(protein.name+"~"+protein.id) AS Proteins,disease.name AS Disease,disease.description AS Description, r.score AS score, r.source AS source
    LITERATURE_ASSOCIATIONS:
        name: 'get publications mentioning the any of the proteins in the list'
        description: 'Get all the articles mentioning the relevant proteins together with the studied tissue or disease'
        involved_nodes:
            - Protein
            - Disease
            - Tissue
            - Publication
        involved_relationships:
            - ASSOCIATED_WITH
        query_type: post
        query: >
            MATCH (project:Project)-[:STUDIES_DISEASE]->(disease:Disease)-[:HAS_PARENT]->(p:Disease)<-[:HAS_PARENT]-(pdisease:Disease) 
            WHERE project.id="PROJECTID" AND p.id <> "DOID:4"
            WITH collect(disease)+collect(pdisease) AS diseases 
            MATCH (d:Disease)-[:MENTIONED_IN_PUBLICATION]->(publication:Publication)<-[r:MENTIONED_IN_PUBLICATION]-(protein:Protein) 
            WHERE d IN diseases AND (protein.name+"~"+protein.id) IN [IDENTIFIERS] 
            WITH d, publication, protein
            RETURN DISTINCT collect(DISTINCT protein.name+"~"+protein.id) AS Proteins, publication.id AS publication, publication.linkout AS linkout, COLLECT(d.name) AS Diseases;
ptm:
    NUMBER_OF_MODIFIED_PROTEINS:
        name: number of modified proteins
        description: 'Extracts the number of modified proteins identified in a given Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Modified_protein
        involved_rels:
            - HAS_QUANTIFIED_MODIFIED_PROTEIN
        query_type: pre
        query: >
            MATCH p=(project:Project)-[:HAS_ENROLLED]->(subject:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_MODIFIED_PROTEIN]->(modifiedprotein:Modified_protein)-[:HAS_MODIFICATION]->(modification:Modification) 
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor)
            RETURN a.external_id AS name, a.external_id AS x,a.group AS group,COUNT(DISTINCT(modifiedprotein.id)) AS y,modification.name AS type ORDER BY group;
    ORIGINAL:
        name: 'get dataset from project'
        description: 'Extracts the dataset matrix of quantified protein modifications in a given Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Modified_protein
        involved_rels:
            - HAS_QUANTIFIED_PROTEIN
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(subject:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_MODIFIED_PROTEIN]->(modifiedprotein:Modified_protein)<-[:HAS_MODIFIED_SITE]-(protein:Protein)
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor)
            RETURN subject.external_id as subject, a.external_id AS sample, modifiedprotein.id AS identifier, a.group AS group, toFloat(r.value) as Intensity, protein.name AS name ORDER BY name, group;
    SUBSTRATE_ASSOCIATIONS:
        name: 'get regulators associated with the provided list of modified protein sites'
        description: 'Get all the articles mentioning the relevant proteins together with the studied tissue or disease'
        involved_nodes:
            - Protein
            - Modified_protein
        involved_relationships:
            - IS_SUBSTRATE_OF
        query_type: post
        query: >
            MATCH (sprotein:Protein)-[:HAS_MODIFIED_SITE]->(modified_protein:Modified_protein)-[r:IS_SUBSTRATE_OF]->(protein:Protein)
            WHERE (sprotein.name+"~"+modified_protein.id) IN [IDENTIFIERS]
            RETURN (sprotein.name+"~"+modified_protein.id) AS node1, protein.name AS node2, r.score AS weight, r.source AS Database;
    DISEASE_ASSOCIATIONS:
        name: 'get diseases associated to the list of modified proteins'
        description: 'Get all the disease-modified_protein associations for the relevant modifications'
        involved_nodes:
            - Modified_protein
            - Disease
        involved_relationships:
            - ASSOCIATED_WITH
        query_type: post
        query: >
            MATCH (sprotein:Protein)-[:HAS_MODIFIED_SITE]->(modified_protein:Modified_protein)-[r:ASSOCIATED_WITH]->(disease:Disease)
            WHERE (sprotein.name+"~"+modified_protein.id) IN [IDENTIFIERS]
            RETURN DISTINCT collect(sprotein.name+"~"+modified_protein.id) AS PTM, disease.name AS Disease, disease.description AS Description, r.source AS source;
    DRUG_ASSOCIATIONS:
        name: 'get drugs targetting the list of proteins with modifications'
        description: 'Get all the drug-protein associations for the relevant proteins'
        involved_nodes:
            - Protein
            - Drug
        involved_relationships:
            - ACTS_ON
            - COMPILED_INTERACTS_WITH
        query_type: post
        query: >
            MATCH (sprotein:Protein)-[:HAS_MODIFIED_SITE]->(modified_protein:Modified_protein)<-[:HAS_MODIFIED_SITE]-(protein:Protein)<-[r:ACTS_ON]-(drug:Drug)
            WHERE (sprotein.name+"~"+modified_protein.id) IN [IDENTIFIERS] AND toFloat(r.score)>=0.4
            RETURN DISTINCT collect(sprotein.name+"~"+modified_protein.id) AS Modified_protein, collect(protein.name+"~"+protein.id) AS Proteins,drug.name AS Drug,r.score AS score, r.source AS source,r.action AS action
    GO_ANNOTATION_MOD:
        name: 'get gene ontology annotations for the modified proteins identified'
        description: 'Get all the gene ontology annotations for the all the modified proteins identified in a project'
        involved_nodes:
            - Modified_protein
            - Biological_process
        involved_relationships:
            - ASSOCIATED_WITH
        query_type: post
        query: >
            MATCH (sprotein:Protein)-[:HAS_MODIFIED_SITE]->(modified_protein:Modified_protein)-[rp:ASSOCIATED_WITH]->(go:Biological_process) 
            WHERE (sprotein.name+"~"+modified_protein.id) IN [IDENTIFIERS]
            RETURN DISTINCT collect(sprotein.name+"~"+modified_protein.id) AS identifier, go.name AS annotation, rp.source AS source
    MODIFIER_VALUES:
        name: 'get regulators associated with the provided list of modified protein sites and their quantifications'
        description: 'Get all the proteins known to modify the sites provided and return their quantifications'
        involved_nodes:
            - Protein
            - Modified_protein
            - Project
            - Subject
            - Biological_sample
            - Analytical_sample
        involved_relationships:
            - HAS_QUANTIFIED_MODIFIED_PROTEIN
            - IS_SUBSTRATE_OF
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_MODIFIED_PROTEIN]-(modified_protein:Modified_protein)<-[:HAS_MODIFIED_SITE]-(protein:Protein)
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor)
            WITH modified_protein, protein
            MATCH (modified_protein)-[:IS_SUBSTRATE_OF]->(sprotein:Protein)
            RETURN DISTINCT (protein.name+"~"+modified_protein.id) AS identifier, sprotein.name AS modifier;
    REG_GO_ANNOTATION:
        name: 'get biological processes associated to the proteins regulating the modified sites'
        description: 'Biological processes annotated to the proteins regulating the specified sites'
        involved_nodes:
            - Protein
            - Modified_protein
            - Biological_process
        involved_relationships:
            - IS_SUBSTRATE_OF
            - ASSOCIATED_WITH
        query_type: post
        query: >
            MATCH (sprotein:Protein)-[:HAS_MODIFIED_SITE]->(modified_protein:Modified_protein)-[:IS_SUBSTRATE_OF]->(k:Protein)-[r:ASSOCIATED_WITH]->(go:Biological_process)
            WHERE (sprotein.name+"~"+modified_protein.id) IN [IDENTIFIERS]
            RETURN DISTINCT collect(DISTINCT k.name+"~"+k.id) AS identifier, go.name AS annotation, r.source AS source;
    PATHWAY_ANNOTATION:
        name: 'get pathway annotations for the proteins identified'
        description: 'Get all the pathway annotations for the all the proteins identified in a project'
        involved_nodes:
            - Project
            - Analytical_sample
            - Modified_protein
            - Protein
            - Pathway
        involved_relationships:
            - ANNOTATED_IN_PATHWAY
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_MODIFIED_PROTEIN]-(modified_protein:Modified_protein)<-[:HAS_MODIFIED_SITE]-(protein:Protein)-[rp:ANNOTATED_IN_PATHWAY]->(pathway:Pathway)
            WHERE project.id="PROJECTID" AND toLower(rp.source) IN ["reactome"] AND toBoolean(r.is_razor)
            RETURN DISTINCT protein.name+"~"+protein.id AS identifier,pathway.name AS annotation,rp.source AS source
    GO_ANNOTATION:
        name: 'get gene ontology annotations for the proteins identified'
        description: 'Get all the gene ontology annotations for the all the proteins identified in a project'
        involved_nodes:
            - Project
            - Analytical_sample
            - Modified_protein
            - Protein
            - Biological_process
        involved_relationships:
            - ASSOCIATED_WITH
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:HAS_QUANTIFIED_MODIFIED_PROTEIN]-(modified_protein:Modified_protein)<-[:HAS_MODIFIED_SITE]-(protein:Protein)-[rp:ASSOCIATED_WITH]->(go:Biological_process) 
            WHERE project.id="PROJECTID" AND toBoolean(r.is_razor)
            RETURN DISTINCT protein.name+"~"+protein.id AS identifier,go.name AS annotation,rp.source AS source
clinical:
    CLINICAL_VARIABLES:
        name: 'get clinical variables and clinical states'
        description: 'Extracts the list of clinical variables for each of the subjects in a Project and their description. Requires: Project.id'
        involved_nodes:
            - Project
            - Subject
            - Disease
            - Biological_sample
            - Clinical_variable
        involved_rels:
            - HAS_ENROLLED
            - HAS_DISEASE
            - BELONGS_TO_SUBJECT
            - HAS_QUANTIFIED_CLINICAL
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(subject:Subject)-[:HAS_DISEASE]->(disease:Disease)
            WITH subject,disease
            WHERE project.id="PROJECTID"
            MATCH (subject)<-[:BELONGS_TO_SUBJECT]-(bs:Biological_sample)-[r]->(clinvar:Clinical_variable)
            WITH subject, disease, bs, r, clinvar
            MATCH (bs)-[:SPLITTED_INTO]->(as:Analytical_sample)
            RETURN subject.external_id AS subject, as.group AS group, disease.id AS disease_id, disease.name AS disease_name, disease.description AS disease_description, clinvar.id AS clinvar_id, clinvar.name AS clinical_variable, clinvar.description AS clinical_variable_description, r.value AS value ORDER BY subject    
    ORIGINAL:
        name: 'get all the measurements for clinical variables'
        description: 'Extracts the list of clinical variables measured in a project. Requires: Project.id'
        involved_nodes:
            - Project
            - Subject
            - Biological_sample
            - Clinical_variable
        involved_rels:
            - HAS_ENROLLED
            - HAS_DISEASE
            - BELONGS_TO_SUBJECT
            - HAS_QUANTIFIED_CLINICAL
        query_type: pre
        query: >
            MATCH (project:Project)-[:HAS_ENROLLED]->(subject:Subject)<-[:BELONGS_TO_SUBJECT]-(bs:Biological_sample)-[r1]->(clinvar:Clinical_variable)
            WITH subject, bs, clinvar, r1
            WHERE project.id="PROJECTID"
            MATCH (bs)-[r2:SPLITTED_INTO]-(an:Analytical_sample)
            RETURN subject.external_id AS subject, bs.external_id AS biological_sample, an.group AS group, clinvar.name AS clinical_variable, r1.value AS value, type(r1) AS rel_type ORDER BY subject
wes:
    NUMBER_SOMATIC_MUTATIONS:
        name: 'number somatic mutations'
        description: 'Provides the number of somatic variants called in a Project. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Somatic_mutation
        involved_rels:
            - CONTAINS_MUTATION
        query_type: pre
        query: >
            MATCH p=(project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:CONTAINS_MUTATION]-> (s:Somatic_mutation)
            WHERE project.id="PROJECTID"
            RETURN a.external_id AS name, a.external_id AS x,COUNT(DISTINCT(s.id)) AS y, a.group AS group ORDER BY group;
    SOMATIC_MUTATIONS:
        name: 'somatic mutations'
        description: 'Extracts the list of somatic variants called in a Project with all they attributes. Requires: Project.id'
        involved_nodes:
            - Project
            - Analytical_sample
            - Somatic_mutation
        involved_rels:
            - CONTAINS_MUTATION 
        query_type: pre
        query: >
            MATCH p=(project:Project)-[:HAS_ENROLLED]->(:Subject)-[:BELONGS_TO_SUBJECT]-(:Biological_sample)-[:SPLITTED_INTO]->(a:Analytical_sample)-[r:CONTAINS_MUTATION]-> (s:Somatic_mutation) 
            WHERE project.id="PROJECTID" 
            RETURN a.external_id AS analytical_sample, s.external_id AS somatic_mutation, s.somaticalternative_names AS alternative_names, s.function AS function, s.SNVid AS variant_id, s.region AS region, s.Xref AS external_reference, s.TFATHMM_score AS FATHMM_score, s.DLRT_score AS DLRT_score, s.MutationAssessor_score AS MutationAssessor_score, s.MutationTaster_score AS MutationTaster_score,s.PROVEAN_score AS PROVEAN_score,s.Polyphen2_HDIV_score AS Polyphen2_HDIV_score,s.Polyphen2_HVAR_score AS Polyphen2_HVAR_score,s.SIFT_score AS SIFT_score, s.VEST3_score AS VEST3_score
